import("rtt_ros")
ros.import("rtt_rosnode")
ros.import("rtt_actionlib")
ros.import("rtt_std_msgs")
ros.import("rtt_sensor_msgs")
ros.import("rtt_actionlib_msgs")
ros.import("rtt_trajectory_msgs")
ros.import("rtt_control_msgs")

ros.import("conman");
ros.import("conman_ros");
ros.import("hardware_interface")
ros.import("irp6_regulator")
ros.import("oro_joint_state_publisher")
ros.import("oro_joint_trajectory_action")
ros.import("joint_spline_trajectory_generator")


//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");
setActivity("scheme", 0.002, 5, ORO_SCHED_RT);
scheme.loadService("conman_ros");
scheme.configure();

//------------------------------------------------------------------------------
//-- Controller
//------------------------------------------------------------------------------
loadComponent("HardwareInterface","HardwareInterface")
//setActivity("HardwareInterface", 0.002, 5, ORO_SCHED_RT)
HardwareInterface.number_of_drives = 6;
HardwareInterface.configure()

loadComponent("IRp6Regulator","IRp6Regulator")
//setActivity("IRp6Regulator", 0, 5, ORO_SCHED_RT)
IRp6Regulator.number_of_drives = 6;
IRp6Regulator.configure()

loadComponent("trans","IRP6PTransmission")
//setActivity("trans", 0.02, 5, ORO_SCHED_RT)
trans.configure()

loadComponent("transInv","IRP6PTransmissionInv")
//setActivity("transInv", 0.02, 5, ORO_SCHED_RT)
transInv.configure()

loadComponent("JointSplineTrajectoryGenerator", "JointSplineTrajectoryGenerator")
//setActivity("JointSplineTrajectoryGenerator",0.002,2,ORO_SCHED_RT)

JointSplineTrajectoryGenerator.loadService("rosparam");
JointSplineTrajectoryGenerator.rosparam.getAll();

connect("trans.JointPosition","JointSplineTrajectoryGenerator.JointPosition", ConnPolicy())
connect("JointSplineTrajectoryGenerator.JointPositionCommand","transInv.JointPosition", ConnPolicy())
JointSplineTrajectoryGenerator.configure()

## Connect
connect("HardwareInterface.computedPwm_in","IRp6Regulator.computedPwm_out", ConnPolicy())
connect("HardwareInterface.MotorPosition","trans.MotorPosition", ConnPolicy())
connect("transInv.MotorPosition", "HardwareInterface.MotorPositionCommand", ConnPolicy())
connect("IRp6Regulator.posInc_in","HardwareInterface.posInc_out", ConnPolicy())
connect("IRp6Regulator.deltaInc_in","HardwareInterface.deltaInc_out", ConnPolicy())

addPeer("scheme", "HardwareInterface");
addPeer("scheme", "IRp6Regulator");
addPeer("scheme", "trans");
addPeer("scheme", "transInv");
addPeer("scheme", "JointSplineTrajectoryGenerator");

scheme.addBlock("HardwareInterface");
scheme.addBlock("IRp6Regulator");
scheme.latchConnections("HardwareInterface", "IRp6Regulator", true);
scheme.addBlock("trans");
scheme.latchConnections("HardwareInterface", "trans", true);
scheme.addBlock("transInv");
scheme.addBlock("JointSplineTrajectoryGenerator");

// ROS Interface

loadComponent("JointTrajectoryAction", "JointTrajectoryAction")
setActivity("JointTrajectoryAction",0 ,2 ,ORO_SCHED_RT)
JointTrajectoryAction.loadService("rosparam");
JointTrajectoryAction.rosparam.getAll();

JointTrajectoryAction.loadService("actionlib")
JointTrajectoryAction.actionlib.connect("/irp6p_arm/joint_trajectory_action")

connect("JointTrajectoryAction.trajectoryPtr","JointSplineTrajectoryGenerator.trajectoryPtr", ConnPolicy())
JointTrajectoryAction.configure()

// joint states
loadComponent("JntPub", "JointStatePublisher");
setActivity("JntPub", 0.01, 2, ORO_SCHED_RT);
JntPub.loadService("rosparam");
JntPub.rosparam.getAll();

connect("trans.JointPosition", "JntPub.JointPosition", ConnPolicy());
connect("trans.JointPosition", "JntPub.JointVelocity", ConnPolicy());
connect("trans.JointPosition", "JntPub.JointEffort", ConnPolicy());

stream("JntPub.joint_state", ros.comm.topic("/joint_states"));

JntPub.configure()

## Start it
scheme.start()
IRp6Regulator.start()
HardwareInterface.start()
trans.start()
transInv.start()
JntPub.start()


