import("rtt_ros")
ros.import("rtt_rosnode")
ros.import("rtt_actionlib")
ros.import("rtt_std_msgs")
ros.import("rtt_sensor_msgs")
ros.import("rtt_actionlib_msgs")
ros.import("rtt_trajectory_msgs")
ros.import("rtt_control_msgs")
ros.import("rtt_cartesian_trajectory_msgs")
ros.import("rtt_force_control_msgs")

ros.import("conman");
ros.import("conman_ros");
ros.import("hardware_interface")
ros.import("irp6_regulator")
ros.import("oro_joint_state_publisher")
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")
ros.import("irp6pm_kinematic")
ros.import("controller_common");
ros.import("force_contol");
ros.import("ati6284");
ros.import("port_split");



//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");
setActivity("scheme", 0.002, 5, ORO_SCHED_RT);
scheme.loadService("conman_ros");
scheme.configure();

//------------------------------------------------------------------------------
//-- Controller
//------------------------------------------------------------------------------
loadComponent("HardwareInterface","HardwareInterface")
//setActivity("HardwareInterface", 0.002, 5, ORO_SCHED_RT)
HardwareInterface.loadService("rosparam")
HardwareInterface.rosparam.getAll()
//HardwareInterface.configure()

// Motors Regulators

loadComponent("IRp6pmRegulator_0","IRp6Regulator")
IRp6pmRegulator_0.loadService("rosparam")
IRp6pmRegulator_0.rosparam.getAll()
IRp6pmRegulator_0.configure()

loadComponent("IRp6pmRegulator_1","IRp6Regulator")
IRp6pmRegulator_1.loadService("rosparam")
IRp6pmRegulator_1.rosparam.getAll()
IRp6pmRegulator_1.configure()

loadComponent("IRp6pmRegulator_2","IRp6Regulator")
IRp6pmRegulator_2.loadService("rosparam")
IRp6pmRegulator_2.rosparam.getAll()
IRp6pmRegulator_2.configure()

loadComponent("IRp6pmRegulator_3","IRp6Regulator")
IRp6pmRegulator_3.loadService("rosparam")
IRp6pmRegulator_3.rosparam.getAll()
IRp6pmRegulator_3.configure()

loadComponent("IRp6pmRegulator_4","IRp6Regulator")
IRp6pmRegulator_4.loadService("rosparam")
IRp6pmRegulator_4.rosparam.getAll()
IRp6pmRegulator_4.configure()

loadComponent("IRp6pmRegulator_5","IRp6Regulator")
IRp6pmRegulator_5.loadService("rosparam")
IRp6pmRegulator_5.rosparam.getAll()
IRp6pmRegulator_5.configure()

addPeer("HardwareInterface", "IRp6pmRegulator_0")
addPeer("HardwareInterface", "IRp6pmRegulator_1")
addPeer("HardwareInterface", "IRp6pmRegulator_2")
addPeer("HardwareInterface", "IRp6pmRegulator_3")
addPeer("HardwareInterface", "IRp6pmRegulator_4")
addPeer("HardwareInterface", "IRp6pmRegulator_5")


//HardwareInterface.configure()

// double port spliter

loadComponent("PortDoubleSplit_hw_cp","PortDoubleSplit")
PortDoubleSplit_hw_cp.loadService("rosparam")
PortDoubleSplit_hw_cp.rosparam.getAll()
PortDoubleSplit_hw_cp.configure()


// double port aggregate

loadComponent("PortDoubleAggregate_hw_p","PortDoubleAggregate")
PortDoubleAggregate_hw_p.loadService("rosparam")
PortDoubleAggregate_hw_p.rosparam.getAll()
PortDoubleAggregate_hw_p.configure()


loadComponent("Irp6pmM2J","Irp6pmM2J")
//setActivity("Irp6pmM2J", 0.02, 5, ORO_SCHED_RT)
Irp6pmM2J.configure()

loadComponent("Irp6pmForwardKinematic","Irp6pmForwardKinematic")
Irp6pmForwardKinematic.configure()

connect("Irp6pmM2J.JointPosition","Irp6pmForwardKinematic.JointPosition", ConnPolicy())

loadComponent("Irp6pmInverseKinematic","Irp6pmInverseKinematic")
Irp6pmInverseKinematic.configure()

connect("Irp6pmM2J.JointPosition","Irp6pmInverseKinematic.CurrentJointPosition", ConnPolicy())

loadComponent("Irp6pmJ2M","Irp6pmJ2M")
Irp6pmJ2M.configure()

connect("Irp6pmJ2M.JointPosition","Irp6pmInverseKinematic.OutputJointPosition", ConnPolicy())

loadComponent("SplineTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")

SplineTrajectoryGeneratorJoint.loadService("rosparam");
SplineTrajectoryGeneratorJoint.rosparam.getAll();


connect("Irp6pmM2J.JointPosition","SplineTrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("SplineTrajectoryGeneratorJoint.JointPositionCommand","Irp6pmJ2M.JointPosition", ConnPolicy())
SplineTrajectoryGeneratorJoint.configure()

loadComponent("SplineTrajectoryGeneratorMotor", "InternalSpaceSplineTrajectoryGenerator")

SplineTrajectoryGeneratorMotor.loadService("rosparam");
SplineTrajectoryGeneratorMotor.rosparam.getAll();


connect("PortDoubleAggregate_hw_p.OutputPort","SplineTrajectoryGeneratorMotor.JointPosition", ConnPolicy())
connect("SplineTrajectoryGeneratorMotor.JointPositionCommand","PortDoubleSplit_hw_cp.InputPort", ConnPolicy())


SplineTrajectoryGeneratorMotor.configure()

// PoseInt

loadComponent("PoseInt", "CartesianInterpolator")

connect("Irp6pmForwardKinematic.EndEffectorOutputPose", "PoseInt.CartesianPosition", ConnPolicy())
connect("PoseInt.CartesianPositionCommand", "Irp6pmInverseKinematic.InputEndEffectorPose", ConnPolicy())

PoseInt.configure();

// ToolInt

loadComponent("ToolInt", "CartesianInterpolator")
ToolInt.configure();
ToolInt.loadService("rosparam");
ToolInt.rosparam.getAll();

connect("ToolInt.CartesianPositionCommand", "Irp6pmForwardKinematic.Tool", ConnPolicy())
connect("ToolInt.CartesianPositionCommand", "Irp6pmInverseKinematic.Tool", ConnPolicy())

#stream("ToolInt.CartesianPositionCommand", ros.comm.topic("/irp6p_arm/tool"))

// ATI6284

loadComponent("ATI6284", "ATI6284")
setActivity("ATI6284", 0.002, 5, ORO_SCHED_RT)
ATI6284.configure()



// ForceTransformation
loadComponent("ForceTransformation", "ForceTransformation")
ForceTransformation.loadService("rosparam");
ForceTransformation.rosparam.getAll();
ForceTransformation.configure()


connect("ForceTransformation.CurrentWristPose", "Irp6pmForwardKinematic.WristOutputPose", ConnPolicy())
connect("ForceTransformation.CurrentSensorWrench", "ATI6284.Wrench", ConnPolicy())
connect("ForceTransformation.Tool", "ToolInt.CartesianPositionCommand", ConnPolicy())

stream("ForceTransformation.ToolGravityParam", ros.comm.topic("/irp6p_arm/tg_param"))

// ForceControlLaw

loadComponent("ForceControlLaw", "ForceControlLaw")
ForceControlLaw.configure()

connect("ForceControlLaw.OutputEndEffectorPose", "Irp6pmInverseKinematic.InputEndEffectorPose", ConnPolicy())
connect("ForceControlLaw.CurrentEndEffectorPose", "Irp6pmForwardKinematic.EndEffectorOutputPose", ConnPolicy())
connect("ForceTransformation.OutputEndEffectorWrench", "ForceControlLaw.CurrentEndEffectorWrench", ConnPolicy())

stream("ForceControlLaw.CurrentFclParam", ros.comm.topic("/irp6p_arm/fcl_param"))




addPeer("scheme", "HardwareInterface");
addPeer("scheme", "PortDoubleSplit_hw_cp")
addPeer("scheme", "PortDoubleAggregate_hw_p")
addPeer("scheme", "Irp6pmM2J");
addPeer("scheme", "Irp6pmForwardKinematic");
addPeer("scheme", "Irp6pmInverseKinematic");
addPeer("scheme", "Irp6pmJ2M");
addPeer("scheme", "ForceControlLaw");
addPeer("scheme", "ForceTransformation");
#addPeer("scheme", "ATI6284");
addPeer("scheme", "SplineTrajectoryGeneratorJoint");
addPeer("scheme", "SplineTrajectoryGeneratorMotor");
addPeer("scheme", "PoseInt");
addPeer("scheme", "ToolInt");




scheme.addBlock("HardwareInterface");

HardwareInterface.configure();

## Connect
connect("HardwareInterface.computedReg_in_0","IRp6pmRegulator_0.computedPwm_out", ConnPolicy())
connect("IRp6pmRegulator_0.posInc_in","HardwareInterface.posInc_out0", ConnPolicy())
connect("IRp6pmRegulator_0.deltaInc_in","HardwareInterface.deltaInc_out0", ConnPolicy())

connect("HardwareInterface.computedReg_in_1","IRp6pmRegulator_1.computedPwm_out", ConnPolicy())
connect("IRp6pmRegulator_1.posInc_in","HardwareInterface.posInc_out1", ConnPolicy())
connect("IRp6pmRegulator_1.deltaInc_in","HardwareInterface.deltaInc_out1", ConnPolicy())

connect("HardwareInterface.computedReg_in_2","IRp6pmRegulator_2.computedPwm_out", ConnPolicy())
connect("IRp6pmRegulator_2.posInc_in","HardwareInterface.posInc_out2", ConnPolicy())
connect("IRp6pmRegulator_2.deltaInc_in","HardwareInterface.deltaInc_out2", ConnPolicy())

connect("HardwareInterface.computedReg_in_3","IRp6pmRegulator_3.computedPwm_out", ConnPolicy())
connect("IRp6pmRegulator_3.posInc_in","HardwareInterface.posInc_out3", ConnPolicy())
connect("IRp6pmRegulator_3.deltaInc_in","HardwareInterface.deltaInc_out3", ConnPolicy())

connect("HardwareInterface.computedReg_in_4","IRp6pmRegulator_4.computedPwm_out", ConnPolicy())
connect("IRp6pmRegulator_4.posInc_in","HardwareInterface.posInc_out4", ConnPolicy())
connect("IRp6pmRegulator_4.deltaInc_in","HardwareInterface.deltaInc_out4", ConnPolicy())

connect("HardwareInterface.computedReg_in_5","IRp6pmRegulator_5.computedPwm_out", ConnPolicy())
connect("IRp6pmRegulator_5.posInc_in","HardwareInterface.posInc_out5", ConnPolicy())
connect("IRp6pmRegulator_5.deltaInc_in","HardwareInterface.deltaInc_out5", ConnPolicy())

connect("PortDoubleAggregate_hw_p.OutputPort","Irp6pmM2J.MotorPosition", ConnPolicy())
connect("Irp6pmJ2M.MotorPosition", "PortDoubleSplit_hw_cp.InputPort", ConnPolicy())

connect("PortDoubleSplit_hw_cp.OutputPort_0","HardwareInterface.MotorPositionCommand_0", ConnPolicy())
connect("PortDoubleSplit_hw_cp.OutputPort_1","HardwareInterface.MotorPositionCommand_1", ConnPolicy())
connect("PortDoubleSplit_hw_cp.OutputPort_2","HardwareInterface.MotorPositionCommand_2", ConnPolicy())
connect("PortDoubleSplit_hw_cp.OutputPort_3","HardwareInterface.MotorPositionCommand_3", ConnPolicy())
connect("PortDoubleSplit_hw_cp.OutputPort_4","HardwareInterface.MotorPositionCommand_4", ConnPolicy())
connect("PortDoubleSplit_hw_cp.OutputPort_5","HardwareInterface.MotorPositionCommand_5", ConnPolicy())

connect("PortDoubleAggregate_hw_p.InputPort_0","HardwareInterface.MotorPosition_0", ConnPolicy())
connect("PortDoubleAggregate_hw_p.InputPort_1","HardwareInterface.MotorPosition_1", ConnPolicy())
connect("PortDoubleAggregate_hw_p.InputPort_2","HardwareInterface.MotorPosition_2", ConnPolicy())
connect("PortDoubleAggregate_hw_p.InputPort_3","HardwareInterface.MotorPosition_3", ConnPolicy())
connect("PortDoubleAggregate_hw_p.InputPort_4","HardwareInterface.MotorPosition_4", ConnPolicy())
connect("PortDoubleAggregate_hw_p.InputPort_5","HardwareInterface.MotorPosition_5", ConnPolicy())

scheme.addBlock("PortDoubleSplit_hw_cp")
scheme.addBlock("PortDoubleAggregate_hw_p")


scheme.addBlock("Irp6pmM2J");
scheme.addBlock("Irp6pmForwardKinematic");
scheme.addBlock("Irp6pmInverseKinematic");
scheme.latchConnections("PortDoubleSplit_hw_cp", "HardwareInterface", true);
scheme.addBlock("Irp6pmJ2M");
scheme.addBlock("ForceControlLaw");
scheme.addBlock("ForceTransformation");
#scheme.addBlock("ATI6284");
scheme.addBlock("SplineTrajectoryGeneratorJoint");
scheme.addBlock("SplineTrajectoryGeneratorMotor");
scheme.addBlock("PoseInt");
scheme.addBlock("ToolInt");

// ROS Interface

//
// SplineTrajectoryActionJoint
// 

loadComponent("SplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivity("SplineTrajectoryActionJoint",0.01 ,2 ,ORO_SCHED_RT)
SplineTrajectoryActionJoint.loadService("rosparam");
SplineTrajectoryActionJoint.rosparam.getAll();

SplineTrajectoryActionJoint.loadService("actionlib")
SplineTrajectoryActionJoint.actionlib.connect("/irp6p_arm/spline_trajectory_action_joint")

connect("SplineTrajectoryActionJoint.trajectoryPtr","SplineTrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("Irp6pmM2J.JointPosition","SplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("SplineTrajectoryGeneratorJoint.JointPositionCommand","SplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())


SplineTrajectoryActionJoint.configure()


//
// SplineTrajectoryActionMotor
// 

loadComponent("SplineTrajectoryActionMotor", "InternalSpaceSplineTrajectoryAction")
setActivity("SplineTrajectoryActionMotor",0.01 ,2 ,ORO_SCHED_RT)
SplineTrajectoryActionMotor.loadService("rosparam");
SplineTrajectoryActionMotor.rosparam.getAll();

SplineTrajectoryActionMotor.loadService("actionlib")
SplineTrajectoryActionMotor.actionlib.connect("/irp6p_arm/spline_trajectory_action_motor")

connect("SplineTrajectoryActionMotor.trajectoryPtr","SplineTrajectoryGeneratorMotor.trajectoryPtr", ConnPolicy())
connect("Irp6pmM2J.JointPosition","SplineTrajectoryActionMotor.JointPosition", ConnPolicy())
connect("SplineTrajectoryGeneratorMotor.JointPositionCommand","SplineTrajectoryActionMotor.JointPositionCommand", ConnPolicy())

SplineTrajectoryActionMotor.configure()

//
// CartesianTrajectoryAction
//

loadComponent("PoseIntAction", "CartesianTrajectoryAction")
setActivity("PoseIntAction",0.01 ,2 ,ORO_SCHED_RT)

PoseIntAction.configure()

PoseIntAction.loadService("actionlib")
PoseIntAction.actionlib.connect("/irp6p_arm/pose_trajectory")

connect("PoseIntAction.CartesianTrajectoryCommand","PoseInt.CartesianTrajectoryCommand", ConnPolicy())


//
// ToolIntAction
//

loadComponent("ToolIntAction", "CartesianTrajectoryAction")
setActivity("ToolIntAction",0.01 ,2 ,ORO_SCHED_RT)

ToolIntAction.configure()

ToolIntAction.loadService("actionlib")
ToolIntAction.actionlib.connect("/irp6p_arm/tool_trajectory")

connect("ToolIntAction.CartesianTrajectoryCommand","ToolInt.CartesianTrajectoryCommand", ConnPolicy())



// joint states
loadComponent("JntPub", "JointStatePublisher");
setActivity("JntPub", 0.01, 2, ORO_SCHED_RT);
JntPub.loadService("rosparam");
JntPub.rosparam.getAll();

connect("Irp6pmM2J.JointPosition", "JntPub.JointPosition", ConnPolicy());
connect("Irp6pmM2J.JointPosition", "JntPub.JointVelocity", ConnPolicy());
connect("Irp6pmM2J.JointPosition", "JntPub.JointEffort", ConnPolicy());

stream("JntPub.joint_state", ros.comm.topic("/joint_states"));

JntPub.configure()

stream("Irp6pmForwardKinematic.WristOutputPose", ros.comm.topic("/cartesian_position"))
#stream("ATI6284.Wrench", ros.comm.topic("/ati_wrench"))

## Start it
scheme.start()
HardwareInterface.start()
IRp6pmRegulator_0.start()
IRp6pmRegulator_1.start()
IRp6pmRegulator_2.start()
IRp6pmRegulator_3.start()
IRp6pmRegulator_4.start()
IRp6pmRegulator_5.start()
PortDoubleSplit_hw_cp.start()
PortDoubleAggregate_hw_p.start()
Irp6pmM2J.start()
Irp6pmForwardKinematic.start()
Irp6pmInverseKinematic.start()
Irp6pmJ2M.start()
#ForceControlLaw.start()
ATI6284.start()
JntPub.start()
SplineTrajectoryActionJoint.start()
SplineTrajectoryActionMotor.start()
PoseIntAction.start()
ToolIntAction.start()
ToolInt.start()



