import("rtt_ros")
ros.import("rtt_rosnode")
ros.import("rtt_actionlib")
ros.import("rtt_std_msgs")
ros.import("rtt_sensor_msgs")
ros.import("rtt_actionlib_msgs")
ros.import("rtt_trajectory_msgs")
ros.import("rtt_control_msgs")
ros.import("rtt_cartesian_trajectory_msgs")

ros.import("conman");
ros.import("conman_ros");
ros.import("hardware_interface")
ros.import("irp6_regulator")
ros.import("oro_joint_state_publisher")
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")
ros.import("irp6p_kinematic")
ros.import("controller_common");
ros.import("force_contol");
ros.import("ati6284");


//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("scheme", "conman::Scheme");
setActivity("scheme", 0.002, 5, ORO_SCHED_RT);
scheme.loadService("conman_ros");
scheme.configure();

//------------------------------------------------------------------------------
//-- Controller
//------------------------------------------------------------------------------
loadComponent("HardwareInterface","HardwareInterface")
//setActivity("HardwareInterface", 0.002, 5, ORO_SCHED_RT)
HardwareInterface.number_of_drives = 6;
HardwareInterface.configure()

loadComponent("IRp6Regulator","IRp6Regulator")
//setActivity("IRp6Regulator", 0, 5, ORO_SCHED_RT)
IRp6Regulator.number_of_drives = 6;
IRp6Regulator.configure()

loadComponent("trans","IRP6PTransmission")
//setActivity("trans", 0.02, 5, ORO_SCHED_RT)
trans.configure()

loadComponent("ForwardKinematic","Irp6pForwardKinematic")
ForwardKinematic.configure()

connect("trans.JointPosition","ForwardKinematic.JointPosition", ConnPolicy())

loadComponent("InverseKinematic","Irp6pInverseKinematic")
InverseKinematic.configure()

connect("trans.JointPosition","InverseKinematic.CurrentJointPosition", ConnPolicy())

loadComponent("transInv","IRP6PTransmissionInv")
transInv.configure()

connect("transInv.JointPosition","InverseKinematic.OutputJointPosition", ConnPolicy())

loadComponent("SplineTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")

SplineTrajectoryGeneratorJoint.loadService("rosparam");
SplineTrajectoryGeneratorJoint.rosparam.getAll();


connect("trans.JointPosition","SplineTrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("SplineTrajectoryGeneratorJoint.JointPositionCommand","transInv.JointPosition", ConnPolicy())
SplineTrajectoryGeneratorJoint.configure()

loadComponent("SplineTrajectoryGeneratorMotor", "InternalSpaceSplineTrajectoryGenerator")

SplineTrajectoryGeneratorMotor.loadService("rosparam");
SplineTrajectoryGeneratorMotor.rosparam.getAll();


connect("HardwareInterface.MotorPosition","SplineTrajectoryGeneratorMotor.JointPosition", ConnPolicy())
connect("SplineTrajectoryGeneratorMotor.JointPositionCommand","HardwareInterface.MotorPositionCommand", ConnPolicy())


SplineTrajectoryGeneratorMotor.configure()

// PoseInt

loadComponent("PoseInt", "CartesianInterpolator")

connect("ForwardKinematic.EndEffectorOutputPose", "PoseInt.CartesianPosition", ConnPolicy())
connect("PoseInt.CartesianPositionCommand", "InverseKinematic.InputEndEffectorPose", ConnPolicy())

PoseInt.configure();

// ToolInt

loadComponent("ToolInt", "CartesianInterpolator")
ToolInt.configure();
ToolInt.loadService("rosparam");
ToolInt.rosparam.getAll();

connect("ToolInt.CartesianPositionCommand", "ForwardKinematic.Tool", ConnPolicy())
connect("ToolInt.CartesianPositionCommand", "InverseKinematic.Tool", ConnPolicy())

// ATI6284

loadComponent("ATI6284", "ATI6284")
ATI6284.configure()


// ForceControlLaw

loadComponent("ForceControlLaw", "ForceControlLaw")
ForceControlLaw.configure()

connect("ForceControlLaw.OutputPose", "InverseKinematic.InputWristPose", ConnPolicy())
connect("ForceControlLaw.CurrentPose", "ForwardKinematic.WristOutputPose", ConnPolicy())
connect("ForceControlLaw.CurrentWrench", "ATI6284.Wrench", ConnPolicy())


// ForceTransformation temporal

loadComponent("ForceTransformation", "ForceTransformation")
ForceTransformation.configure()


connect("ForceTransformation.OutputPose", "InverseKinematic.InputWristPose", ConnPolicy())
connect("ForceTransformation.CurrentPose", "ForwardKinematic.WristOutputPose", ConnPolicy())
connect("ForceTransformation.CurrentWrench", "ATI6284.Wrench", ConnPolicy())



## Connect
connect("HardwareInterface.computedPwm_in","IRp6Regulator.computedPwm_out", ConnPolicy())
connect("HardwareInterface.MotorPosition","trans.MotorPosition", ConnPolicy())
connect("transInv.MotorPosition", "HardwareInterface.MotorPositionCommand", ConnPolicy())
connect("IRp6Regulator.posInc_in","HardwareInterface.posInc_out", ConnPolicy())
connect("IRp6Regulator.deltaInc_in","HardwareInterface.deltaInc_out", ConnPolicy())

addPeer("scheme", "HardwareInterface");
addPeer("scheme", "IRp6Regulator");
addPeer("scheme", "trans");
addPeer("scheme", "ForwardKinematic");
addPeer("scheme", "InverseKinematic");
addPeer("scheme", "transInv");
addPeer("scheme", "ForceControlLaw");
addPeer("scheme", "ForceTransformation");
addPeer("scheme", "ATI6284");
addPeer("scheme", "SplineTrajectoryGeneratorJoint");
addPeer("scheme", "SplineTrajectoryGeneratorMotor");
addPeer("scheme", "PoseInt");
addPeer("scheme", "ToolInt");




scheme.addBlock("HardwareInterface");
scheme.addBlock("IRp6Regulator");
scheme.latchConnections("HardwareInterface", "IRp6Regulator", true);
scheme.addBlock("trans");
scheme.addBlock("ForwardKinematic");
scheme.addBlock("InverseKinematic");
scheme.latchConnections("HardwareInterface", "trans", true);
scheme.addBlock("transInv");
scheme.addBlock("ForceControlLaw");
scheme.addBlock("ForceTransformation");
scheme.addBlock("ATI6284");
scheme.addBlock("SplineTrajectoryGeneratorJoint");
scheme.addBlock("SplineTrajectoryGeneratorMotor");
scheme.latchConnections("HardwareInterface", "SplineTrajectoryGeneratorMotor", true);
scheme.addBlock("PoseInt");
scheme.addBlock("ToolInt");

// ROS Interface

//
// SplineTrajectoryActionJoint
// 

loadComponent("SplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivity("SplineTrajectoryActionJoint",0.01 ,2 ,ORO_SCHED_RT)
SplineTrajectoryActionJoint.loadService("rosparam");
SplineTrajectoryActionJoint.rosparam.getAll();

SplineTrajectoryActionJoint.loadService("actionlib")
SplineTrajectoryActionJoint.actionlib.connect("/irp6p_arm/spline_trajectory_action_joint")

connect("SplineTrajectoryActionJoint.trajectoryPtr","SplineTrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("trans.JointPosition","SplineTrajectoryActionJoint.JointPosition", ConnPolicy())


SplineTrajectoryActionJoint.configure()


//
// SplineTrajectoryActionMotor
// 

loadComponent("SplineTrajectoryActionMotor", "InternalSpaceSplineTrajectoryAction")
setActivity("SplineTrajectoryActionMotor",0.01 ,2 ,ORO_SCHED_RT)
SplineTrajectoryActionMotor.loadService("rosparam");
SplineTrajectoryActionMotor.rosparam.getAll();

SplineTrajectoryActionMotor.loadService("actionlib")
SplineTrajectoryActionMotor.actionlib.connect("/irp6p_arm/spline_trajectory_action_motor")

connect("SplineTrajectoryActionMotor.trajectoryPtr","SplineTrajectoryGeneratorMotor.trajectoryPtr", ConnPolicy())
connect("trans.JointPosition","SplineTrajectoryActionMotor.JointPosition", ConnPolicy())

SplineTrajectoryActionMotor.configure()

//
// CartesianTrajectoryAction
//

loadComponent("PoseIntAction", "CartesianTrajectoryAction")
setActivity("PoseIntAction",0.01 ,2 ,ORO_SCHED_RT)

PoseIntAction.configure()

PoseIntAction.loadService("actionlib")
PoseIntAction.actionlib.connect("/irp6p_arm/pose_trajectory")

connect("PoseIntAction.CartesianTrajectoryCommand","PoseInt.CartesianTrajectoryCommand", ConnPolicy())


//
// ToolIntAction
//

loadComponent("ToolIntAction", "CartesianTrajectoryAction")
setActivity("ToolIntAction",0.01 ,2 ,ORO_SCHED_RT)

ToolIntAction.configure()

ToolIntAction.loadService("actionlib")
ToolIntAction.actionlib.connect("/irp6p_arm/tool_trajectory")

connect("ToolIntAction.CartesianTrajectoryCommand","ToolInt.CartesianTrajectoryCommand", ConnPolicy())



// joint states
loadComponent("JntPub", "JointStatePublisher");
setActivity("JntPub", 0.01, 2, ORO_SCHED_RT);
JntPub.loadService("rosparam");
JntPub.rosparam.getAll();

connect("trans.JointPosition", "JntPub.JointPosition", ConnPolicy());
connect("trans.JointPosition", "JntPub.JointVelocity", ConnPolicy());
connect("trans.JointPosition", "JntPub.JointEffort", ConnPolicy());

stream("JntPub.joint_state", ros.comm.topic("/joint_states"));

JntPub.configure()

stream("ForwardKinematic.WristOutputPose", ros.comm.topic("/cartesian_position"))
#stream("ATI6284.Wrench", ros.comm.topic("/ati_wrench"))

## Start it
scheme.start()
IRp6Regulator.start()
HardwareInterface.start()
trans.start()
ForwardKinematic.start()
InverseKinematic.start()
transInv.start()
#ForceControlLaw.start()
ATI6284.start()
JntPub.start()
SplineTrajectoryActionJoint.start()
SplineTrajectoryActionMotor.start()
PoseIntAction.start()
ToolIntAction.start()
ToolInt.start()



